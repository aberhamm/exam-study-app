{
  "markdown": "[Skip to main content](https://doc.sitecore.com/xmc/en/developers/xm-cloud/query-examples-for-the-delivery-api.html#main-content)\n\nOpen publication table of contents\n\n- [XM Cloud Documentation for Developers](https://doc.sitecore.com/xmc/en/developers/xm-cloud/index-en.html)\n- [Experience Edge](https://doc.sitecore.com/xmc/en/developers/xm-cloud/experience-edge.html)\n- [Experience Edge for XM APIs](https://doc.sitecore.com/xmc/en/developers/xm-cloud/experience-edge-for-xm-apis.html)\n- Query examples for the Delivery API\n\n# Query examples for the Delivery API\n\nThis topic describes some examples of how to query the Experience Edge GraphQL schema to meet common query needs. The item IDs and paths in the following samples will not necessarily match those in your solution. When creating your queries, note the [available fields for search](https://doc.sitecore.com/xmc/en/developers/xm-cloud/the-experience-edge-schema.html#UUID-3b4f7518-e1e3-ce17-4a46-753375b6601f_section-idm4534106971473632644132653259). If you specify a language value in the query, the results will only include items in that language.\n\n**Important**\n\nIf your site supports a fallback language, [enable publishing language fallback](https://doc.sitecore.com/xp/en/developers/hd/22/sitecore-headless-development/enable-publishing-language-fallback.html) on the Experience Edge Connector before you start.\n\n## Get an item by ID or path\n\nYou can query items anywhere in your content tree by path or ID to read their fields and other properties. You can use inline fragments to cast items to their projected data template type and fields to their field type.\n\n### Query\n\nRequestResponse\n\nCopy\n\n```\nquery {\n  # path can be an item tree path or GUID-based id\n  item(path: \"/sitecore/content/Experience-Edge/home\", language: \"en\") {\n    # items can be cast to a Template type with inline fragments\n    ... on AppRoute {\n      pageTitle {\n        value\n      }\n    }\n    # fields can be cast to a Field type with inline fragments\n    field(name: \"pageTitle\") {\n      ... on TextField {\n        value\n      }\n    }\n  }\n}\n```\n\n### Result\n\nRequestResponse\n\nCopy\n\n```\n{\n  \"data\": {\n    \"item\": {\n      \"pageTitle\": {\n        \"value\": \"Welcome to Sitecore JSS\"\n      },\n      \"field\": {\n        \"value\": \"Welcome to Sitecore JSS\"\n      }\n    }\n  }\n}\n```\n\n## Get items filtered by multiple paths\n\nYou can filter items based on multiple paths. This query example assumes the following site structure:\n\n![Content tree highlighting the items used in this example.](https://doc.sitecore.com/_next/image?url=https%3A%2F%2Fresources.doc.sitecore.com%2Fassets%2Fimage%2Fuuid-fa6faa6e-6fc3-1b84-b10d-ee4f696aa8a0.png&w=640&q=75)\n\nAssume that the `/home/graphql` and `home/styleguide/Page Components` items have the UUIDs `0C6F4AAF-DD7E-5FAF-B9B0-61070D496055` and `AB99BA2B-B606-51E3-BAD9-FD8358DE1333`, respectively. You want to get the `/home` items and descendants that are not `/home/graphql` and `home/styleguide/Page Components` or their children. The following query uses the `NCONTAINS` operator to exclude the path of these items and their children from the result.\n\n### Query\n\nRequestResponse\n\nCopy\n\n```\nquery {\n  pageOne: search(\n     where: {\n       AND: [\\\n         {\\\n           name: \"_path\"\\\n           value: \"54C8E9B5-0B2C-5363-8FA6-D32A3A302F51\"\\\n           operator: CONTAINS\\\n         }\\\n         {\\\n           AND: [\\\n             {\\\n               name: \"_path\"\\\n               value: \"0C6F4AAF-DD7E-5FAF-B9B0-61070D496055\"\\\n               operator: NCONTAINS\\\n             }\\\n             {\\\n               name: \"_path\"\\\n               value: \"AB99BA2B-B606-51E3-BAD9-FD8358DE1333\"\\\n               operator: NCONTAINS\\\n             }\\\n           ]\\\n         }\\\n       ]\n     }\n     # defaults to 10\n     first: 10\n   ) {\n     total\n     pageInfo {\n       endCursor\n       hasNext\n     }\n     results {\n       url {\n         path\n       }\n     }\n   }\n }\n```\n\n### Result\n\nThe search query result does not contain items with the paths `/home/graphql` and `home/styleguide/Page Components` or any of their descendants but returns the `/home` item and the remaining child items.\n\nRequestResponse\n\nCopy\n\n```\n{\n  \"data\": {\n    \"pageOne\": {\n      \"total\": 5,\n      \"pageInfo\": {\n        \"endCursor\": \"NQ==\",\n        \"hasNext\": false\n      },\n      \"results\": [\\\n        {\\\n          \"url\": {\\\n            \"path\": \"/styleguide/custom-route-type\"\\\n          }\\\n        },\\\n        {\\\n          \"url\": {\\\n            \"path\": \"/styleguide\"\\\n          }\\\n        },\\\n        {\\\n          \"url\": {\\\n            \"path\": \"/Page-Components/home-jss-main-ContentBlock-1\"\\\n          }\\\n        },\\\n        {\\\n          \"url\": {\\\n            \"path\": \"/Page-Components\"\\\n          }\\\n        },\\\n        {\\\n          \"url\": {\\\n            \"path\": \"/\"\\\n          }\\\n        }\\\n      ]\n    }\n  }\n}\n```\n\n## Get item layout for a URL\n\nMost often used with Headless SDKs, you can find items by their site name and HTTP URL and then obtain their Layout Service output for rendering by framework-specific Sitecore placeholder implementations.\n\n### Query\n\nRequestResponse\n\nCopy\n\n```\nquery {\n  layout(site: \"experienceedge\", routePath: \"/\", language: \"en\") {\n    item {\n      rendered\n    }\n  }\n}\n```\n\n### Result\n\nRequestResponse\n\nCopy\n\n```\n{\n  \"data\": {\n    \"layout\": {\n      \"item\": {\n        \"rendered\": {\n          \"sitecore\": {\n            \"context\": {\n              \"pageEditing\": false,\n              \"site\": {\n                \"name\": \"experienceedge\"\n              },\n              \"pageState\": \"normal\",\n              \"language\": \"en\",\n              \"itemPath\": \"/\"\n            },\n            \"route\": {\n              \"name\": \"home\",\n              \"displayName\": \"home\",\n              \"fields\": {\n                \"pageTitle\": {\n                  \"value\": \"Welcome to Sitecore JSS\"\n                }\n              },\n              \"deviceId\": \"fe5d7fdf-89c0-4d99-9aa3-b5fbd009c9f3\",\n              \"itemId\": \"2bde2083-5542-5569-ac5e-f1f42e29f75a\",\n              \"itemLanguage\": \"en\",\n              \"itemVersion\": 1,\n              \"layoutId\": \"714096fc-3998-52cf-b87a-951fc7ce39d3\",\n              \"templateId\": \"e34d8c4f-7e6c-560c-be24-e4d1fcdb16d8\",\n              \"templateName\": \"AppRoute\",\n              \"placeholders\": {\n                \"jss-main\": [\\\n                  {\\\n                    \"uid\": \"2c4a53cc-9da8-5f51-9d79-6ee2fc671b2d\",\\\n                    \"componentName\": \"ContentBlock\",\\\n                    \"dataSource\": \"{CC3A044C-776B-5423-9BEA-CC5C2EDA8C9B}\",\\\n                    \"fields\": {\\\n                      \"heading\": {\\\n                        \"value\": \"Welcome to Sitecore JSS\"\\\n                      },\\\n                      \"content\": {\\\n                        \"value\": \"<p>Thanks for using JSS!! Here are some resources to get you started:</p>\\n\\n<h3><a href=\\\"https://jss.sitecore.net\\\" rel=\\\"noopener noreferrer\\\">Documentation</a></h3>\\n<p>The official JSS documentation can help you with any JSS task from getting started to advanced techniques.</p>\\n\\n<h3><a href=\\\"/styleguide\\\">Styleguide</a></h3>\\n<p>The JSS styleguide is a living example of how to use JSS, hosted right in this app.\\nIt demonstrates most of the common patterns that JSS implementations may need to use,\\nas well as useful architectural patterns.</p>\\n\\n<h3><a href=\\\"/graphql\\\">GraphQL</a></h3>\\n<p>JSS features integration with the Sitecore GraphQL API to enable fetching non-route data from Sitecore - or from other internal backends as an API aggregator or proxy.\\nThis route is a living example of how to use an integrate with GraphQL data in a JSS app.</p>\\n\\n<div class=\\\"alert alert-dark\\\">\\n  <h4>This app is a boilerplate</h4>\\n  <p>The JSS samples are a boilerplate, not a library. That means that any code in this app is meant for you to own and customize to your own requirements.</p>\\n  <p>Want to change the lint settings? Do it. Want to read manifest data from a MongoDB database? Go for it. This app is yours.</p>\\n</div>\\n\\n<div class=\\\"alert alert-dark\\\">\\n  <h4>How to start with an empty app</h4>\\n  <p>To remove all of the default sample content (the Styleguide and GraphQL routes) and start out with an empty JSS app:</p>\\n  <ol>\\n    <li>Delete <code>/src/components/Styleguide*</code> and <code>/src/components/GraphQL*</code></li>\\n    <li>Delete <code>/sitecore/definitions/components/Styleguide*</code>, <code>/sitecore/definitions/templates/Styleguide*</code>, and <code>/sitecore/definitions/components/GraphQL*</code></li>\\n    <li>Delete <code>/data/component-content/Styleguide</code></li>\\n    <li>Delete <code>/data/content/Styleguide</code></li>\\n    <li>Delete <code>/data/routes/styleguide</code> and <code>/data/routes/graphql</code></li>\\n    <li>Delete <code>/data/dictionary/*.yml</code></li>\\n  </ol>\\n</div>\\n\"\\\n                      }\\\n                    }\\\n                  }\\\n                ]\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n## Paginate items in an item bucket\n\nWhen you work with Sitecore [item buckets](https://doc.sitecore.com/xmc/en/users/xm-cloud/item-buckets.html), a common requirement is to paginate all the items that descend from a particular template within that bucket. The following search query is helpful for these use cases.\n\n### Query\n\nRequestResponse\n\nCopy\n\n```\nfragment bucketItemFields on Item {\n  ... on AppRoute {\n    pageTitle {\n      value\n    }\n  }\n  url {\n    path\n  }\n}\n\nquery {\n  search(\n    where: {\n      AND: [\\\n        {\\\n          name: \"_templates\"\\\n          value: \"0929f436c3f3500a9f8bd1c57a67a192\"\\\n          operator: CONTAINS\\\n        }\\\n        {\\\n          name: \"_path\"\\\n          value: \"7ab00eca411249818420666fc9110faf\"\\\n          operator: CONTAINS\\\n        }\\\n      ]\n    }\n    first: 5\n    orderBy: { name: \"pageTitle\", direction: ASC }\n  ) {\n    results {\n      ...bucketItemFields\n    }\n    pageInfo {\n      endCursor\n      hasNext\n    }\n    total\n  }\n}\n```\n\n### Result\n\nRequestResponse\n\nCopy\n\n```\n{\n  \"data\": {\n    \"search\": {\n      \"results\": [\\\n        {\\\n          \"pageTitle\": {\\\n            \"value\": \"Route A\"\\\n          },\\\n          \"url\": {\\\n            \"path\": \"/bucket/2021/05/13/13/12/Route-A\"\\\n          }\\\n        },\\\n        {\\\n          \"pageTitle\": {\\\n            \"value\": \"Route B\"\\\n          },\\\n          \"url\": {\\\n            \"path\": \"/bucket/2021/05/13/13/12/Route-B\"\\\n          }\\\n        },\\\n        {\\\n          \"pageTitle\": {\\\n            \"value\": \"Route C\"\\\n          },\\\n          \"url\": {\\\n            \"path\": \"/bucket/2021/05/13/13/12/Route-C\"\\\n          }\\\n        },\\\n        {\\\n          \"pageTitle\": {\\\n            \"value\": \"Route D\"\\\n          },\\\n          \"url\": {\\\n            \"path\": \"/bucket/2021/05/13/13/12/Route-D\"\\\n          }\\\n        },\\\n        {\\\n          \"pageTitle\": {\\\n            \"value\": \"Route E\"\\\n          },\\\n          \"url\": {\\\n            \"path\": \"/bucket/2021/05/13/13/13/Route-E\"\\\n          }\\\n        }\\\n      ],\n      \"pageInfo\": {\n        \"endCursor\": \"NQ==\",\n        \"hasNext\": true\n      },\n      \"total\": 26\n    }\n  }\n}\n```\n\n## Get the root item of a site\n\nThe Experience Edge schema does not currently allow querying of sites and their root items, but you can still find the root item of a site by using the `layout` query.\n\n### Query\n\nRequestResponse\n\nCopy\n\n```\nquery {\n  layout(site: \"experienceedge\", routePath: \"/\", language: \"en\") {\n    item {\n      homeItemPath: path\n      contentRoot: parent {\n        id\n        path\n      }\n    }\n  }\n}\n```\n\n### Result\n\nRequestResponse\n\nCopy\n\n```\n{\n  \"data\": {\n    \"layout\": {\n      \"item\": {\n        \"homeItemPath\": \"/sitecore/content/Experience-Edge/home\",\n        \"contentRoot\": {\n          \"id\": \"5AAA894246145088B7AD604B4D177B39\",\n          \"path\": \"/sitecore/content/Experience-Edge\"\n        }\n      }\n    }\n  }\n}\n```\n\n## Get all site paths/pages\n\nYou can use the `site` query to find all the items in a specific language with layout data/presentation details on that site. This is useful, for example, for obtaining paths for a static site generator. The route results are paginated and, by default, return only 10 results. You must use the `endCursor` property with the `first` and `after` query arguments to paginate the results.\n\n### Query\n\nRequestResponse\n\nCopy\n\n```\nquery {\n site {\n  siteInfo(site: \"example\") {\n   routes(language: \"en\") {\n    results {\n     route{\n      id\n     }\n     routePath\n    }\n    total\n    pageInfo {\n     endCursor\n     hasNext\n    }\n   }\n  }\n }\n}\n```\n\n### Result\n\nRequestResponse\n\nCopy\n\n```\n{\n \"data\": {\n  \"site\": {\n   \"siteInfo\": {\n    \"routes\": {\n     \"routesResult\": [\\\n      {\\\n       \"route\": {\\\n        \"id\": \"31FB4D08F5E14B4C9AA4EFE8F486B87D\"\\\n       },\\\n       \"routePath\": \"/Page-B\"\\\n      },\\\n      {\\\n       \"route\": {\\\n        \"id\": \"49195BCAB09241A3BC30311F00B7DDC8\"\\\n       },\\\n       \"routePath\": \"/Page-A\"\\\n      },\\\n      {\\\n       \"route\": {\\\n        \"id\": \"BCDA1741BF0D4CA695519FEAE634FFFF\"\\\n       },\\\n       \"routePath\": \"/\"\\\n      }\\\n     ],\n     \"total\": 3,\n     \"pageInfo\": {\n      \"endCursor\": \"Mw==\",\n      \"hasNext\": false\n     }\n    }\n   }\n  }\n }\n}\n```\n\n## Get items filtered by dates and numbers within a range\n\nYou can use operators to query for numbers and dates, such as:\n\n- Equals (EQ)\n\n- Not equal (NEQ)\n\n- Contains (CONTAINS)\n\n- Doesn't contain (NCONTAINS)\n\n\nIn addition, you can use the following operators to query a range of numbers or dates:\n\n- Less than (LT)\n\n- Less than or equals (LTE)\n\n- Greater than (GT)\n\n- Greater than or equals (GTE)\n\n\nWhen you use these operators, the `value` needs to be wrapped in quotation marks. The date comparison supports all standard date/time formats, as well as `yyyyMMddTHHmmssZ`. Dates are stored in UTC format. However, the values entered in the query are assumed to be local ones.\n\n**Important**\n\nBefore using this feature for the first time, republish the content you want to query, to rebuild the internal data structure. Otherwise, the data will be compared lexicographically, as strings. For example, if the data isn't rebuilt, a value of `3` is considered greater than `123`.\n\n### Query - date range\n\nRequestResponse\n\nCopy\n\n```\nquery {\n  search(\n    where: {\n      AND: [\\\n        { name: \"birthdate\" operator: LT value: \"2024-01-01\"}\\\n        { name: \"birthdate\" operator: GT value: \"1950-01-01\"}\\\n      ]\n    }\n  ) {\n    results {\n      name\n      BirthDate: field(name: \"birthdate\") {\n        value\n      }\n    }\n  }\n}\n```\n\n### Result - date range\n\nRequestResponse\n\nCopy\n\n```\nquery {\n  search(\n    where: {\n      AND: [\\\n        { name: \"count\" operator: LTE value: \"300.0\" }\\\n        { name: \"count\" operator: GTE value: \"71\" }\\\n      ]\n    }\n  ) {\n    results {\n      name\n      Count: field(name: \"count\") {\n        value\n      }\n    }\n  }\n}\n```\n\n### Query - number range\n\nRequestResponse\n\nCopy\n\n```\nquery {\n  search(\n    where: {\n      AND: [\\\n        { name: \"count\" operator: LTE value: \"300.0\" }\\\n        { name: \"count\" operator: GTE value: \"71\" }\\\n      ]\n    }\n  ) {\n    results {\n      name\n      Count: field(name: \"count\") {\n        value\n      }\n    }\n  }\n}\n\n```\n\n### Result - number range\n\nRequestResponse\n\nCopy\n\n```\n{\n  \"data\": {\n    \"search\": {\n      \"results\": [\\\n        {\\\n          \"name\": \"3\",\\\n          \"Count\": {\\\n            \"value\": \"71\"\\\n          }\\\n        },\\\n        {\\\n          \"name\": \"2\",\\\n          \"Count\": {\\\n            \"value\": \"300\"\\\n          }\\\n        },\\\n        {\\\n          \"name\": \"1\",\\\n          \"Count\": {\\\n            \"value\": \"100\"\\\n          }\\\n        }\\\n      ]\n    }\n  }\n}\n```\n\n## Build site navigation\n\nThis sample query combines [finding the site root](https://doc.sitecore.com/xmc/en/developers/xm-cloud/query-examples-for-the-delivery-api.html#UUID-b8ee9f96-5d83-6136-666a-56fa1073e137_section-idm4615071291214432428467102955) with the ability to traverse item children. You can use the `hasLayout` argument to find only items with layout (navigable pages) and the `includeTemplateIds` argument to filter on a (base) data template.\n\n### Query\n\nRequestResponse\n\nCopy\n\n```\nfragment navigationFields on Item {\n  ... on AppRoute {\n    pageTitle {\n      value\n    }\n  }\n  url {\n    path\n  }\n}\n\nquery {\n  layout(site: \"experienceedge\", routePath: \"/\", language: \"en\") {\n    item {\n      ...navigationFields\n      children(hasLayout: true, includeTemplateIDs: \"e34d8c4f7e6c560cbe24e4d1fcdb16d8\") {\n        results {\n          ...navigationFields\n          children(hasLayout: true, includeTemplateIDs: \"e34d8c4f7e6c560cbe24e4d1fcdb16d8\") {\n            results {\n            \t...navigationFields\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n### Result\n\nRequestResponse\n\nCopy\n\n```\n{\n  \"data\": {\n    \"layout\": {\n      \"item\": {\n        \"pageTitle\": {\n          \"value\": \"Welcome to Sitecore JSS\"\n        },\n        \"url\": {\n          \"path\": \"/\"\n        },\n        \"children\": {\n          \"results\": [\\\n            {\\\n              \"pageTitle\": {\\\n                \"value\": \"GraphQL | Sitecore JSS\"\\\n              },\\\n              \"url\": {\\\n                \"path\": \"/graphql\"\\\n              },\\\n              \"children\": {\\\n                \"results\": [\\\n                  {\\\n                    \"pageTitle\": {\\\n                      \"value\": \"Sample 1 Page Title\"\\\n                    },\\\n                    \"url\": {\\\n                      \"path\": \"/graphql/sample-1\"\\\n                    }\\\n                  },\\\n                  {\\\n                    \"pageTitle\": {\\\n                      \"value\": \"Sample 2 Page Title\"\\\n                    },\\\n                    \"url\": {\\\n                      \"path\": \"/graphql/sample-2\"\\\n                    }\\\n                  }\\\n                ]\\\n              }\\\n            },\\\n            {\\\n              \"pageTitle\": {\\\n                \"value\": \"Styleguide | Sitecore JSS\"\\\n              },\\\n              \"url\": {\\\n                \"path\": \"/styleguide\"\\\n              },\\\n              \"children\": {\\\n                \"results\": [\\\n                  {\\\n                    \"pageTitle\": {\\\n                      \"value\": \"Custom Route Type | Sitecore JSS\"\\\n                    },\\\n                    \"url\": {\\\n                      \"path\": \"/styleguide/custom-route-type\"\\\n                    }\\\n                  }\\\n                ]\\\n              }\\\n            }\\\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n## Build a page breadcrumb\n\nYou can use the `ancestors` field on the item graph type to create breadcrumb navigation. Use the `hasLayout` argument to find only items with layout (navigable pages), and `includeTemplateIds` to filter on a (base) data template.\n\n### Query\n\nRequestResponse\n\nCopy\n\n```\nfragment breadcrumbFields on Item {\n  ... on AppRoute {\n    pageTitle {\n      value\n    }\n  }\n  url {\n    path\n  }\n}\n\nquery {\n  # Assume the item id is available on the page\n  item(path: \"e2c5c62f42a95b17bc0e71bc9193db9a\", language: \"en\") {\n    ...breadcrumbFields\n    ancestors(\n      hasLayout: true\n      includeTemplateIDs: \"e34d8c4f7e6c560cbe24e4d1fcdb16d8\"\n    ) {\n      ...breadcrumbFields\n    }\n  }\n}\n```\n\n### Result\n\nRequestResponse\n\nCopy\n\n```\n{\n  \"data\": {\n    \"item\": {\n      \"pageTitle\": {\n        \"value\": \"Custom Route Type | Sitecore JSS\"\n      },\n      \"url\": {\n        \"path\": \"/styleguide/custom-route-type\"\n      },\n      \"ancestors\": [\\\n        {\\\n          \"pageTitle\": {\\\n            \"value\": \"Styleguide | Sitecore JSS\"\\\n          },\\\n          \"url\": {\\\n            \"path\": \"/styleguide\"\\\n          }\\\n        },\\\n        {\\\n          \"pageTitle\": {\\\n            \"value\": \"Welcome to Sitecore JSS\"\\\n          },\\\n          \"url\": {\\\n            \"path\": \"/\"\\\n          }\\\n        }\\\n      ]\n    }\n  }\n}\n```\n\n## Use item fields with Sitecore Headless SDKs\n\nThe various Sitecore Headless SDKs all contain helpers for rendering field values. These helpers assist with rendering complex fields (such as images or links) and editable values in the context of inline editing. Item fields in the Experience Edge schema include `jsonValue` that outputs the field in a format compatible with these field helpers.\n\nFor example, the following link field could be rendered in React or Next.js using the `Link` field helper:\n\nRequestResponse\n\nCopy\n\n```\n<Link field={data.linkFieldExample?.externalLink?.jsonValue} />\n```\n\n### Query\n\nRequestResponse\n\nCopy\n\n```\nquery {\n  richTextFieldExample: item(path: \"d979794f76fd51829f3ece48d16dc36c\", language: \"en\") {\n    displayName\n    ... on StyleguideFieldUsageRichText {\n      sample {\n        jsonValue\n      }\n    }\n  }\n  imageFieldExample: item(path: \"c05be0b464885343b5670145b6815d03\", language: \"en\") {\n    displayName\n    ... on StyleguideFieldUsageImage {dic\n      sample1 {\n        jsonValue\n      }\n    }\n  }\n  linkFieldExample: item(path: \"d299e65e1f6c5ea3b71381c8e2f85baf\", language: \"en\") {\n    displayName\n    ... on StyleguideFieldUsageLink {\n      externalLink {\n        jsonValue\n      }\n    }\n  }\n}\n```\n\n### Result\n\nRequestResponse\n\nCopy\n\n```\n{\n  \"data\": {\n    \"richTextFieldExample\": {\n      \"displayName\": \"Styleguide-FieldUsage-RichText-3\",\n      \"sample\": {\n        \"jsonValue\": {\n          \"value\": \"<p>This is a sample rich text field. <mark>HTML is always supported.</mark> In Sitecore, editors will see a WYSIWYG editor for these fields.</p>\"\n        }\n      }\n    },\n    \"imageFieldExample\": {\n      \"displayName\": \"Styleguide-FieldUsage-Image-4\",\n      \"sample1\": {\n        \"jsonValue\": {\n          \"value\": {\n            \"src\": \"https://cm.experience_edge.localhost/-/media/experienceedge/data/media/img/sc_logo.png?iar=0&hash=F4F969FF95009AE0A80FA094C497ED25\",\n            \"alt\": \"Sitecore Logo\"\n          }\n        }\n      }\n    },\n    \"linkFieldExample\": {\n      \"displayName\": \"Styleguide-FieldUsage-Link-9\",\n      \"externalLink\": {\n        \"jsonValue\": {\n          \"value\": {\n            \"href\": \"https://www.sitecore.com\",\n            \"text\": \"Link to Sitecore\",\n            \"url\": \"https://www.sitecore.com\",\n            \"linktype\": \"external\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n## Get information about all content sites\n\nYou can fetch information about all the content sites in a `site` query using the `allSiteInfo` field. For example, to get the name and root path of the first 100 available sites, use the following query:\n\n### Query\n\nRequestResponse\n\nCopy\n\n```\nquery {\n site {\n  allSiteInfo(pageSize:100, pageNumber:1){\n   results {\n       name\n       rootPath\n    }\n   total\n  }\n }\n}\n```\n\n### Result\n\nRequestResponse\n\nCopy\n\n```\n{\n \"data\": {\n  \"site\": {\n   \"allSiteInfo\": {\n     results: [\\\n        {\\\n         \"name\": \"example\",\\\n         \"rootPath\": \"/sitecore/content/sxa/example\"\\\n        },\\\n        {\\\n         \"name\": \"website\",\\\n         \"rootPath\": \"/sitecore/content\"\\\n        }\\\n     ],\n    \"total\": 2\n    }\n  }\n }\n}\n```\n\n## Get information about a specific content site\n\nYou can use the `siteInfo` field in a `site` query to get information about a specific content site. For example, the following query returns the site name and root path.\n\n### Query\n\nRequestResponse\n\nCopy\n\n```\nquery {\n site {\n  siteInfo(site: “example”) {\n   name\n   rootPath\n  }\n }\n}\n```\n\n### Result\n\nRequestResponse\n\nCopy\n\n```\n{\n \"data\": {\n  \"site\": {\n   \"siteInfo\": {\n    \"name\": \"example\",\n    \"rootPath\": \"/sitecore/content/sxa/example\"\n   }\n  }\n }\n}\n```\n\n## List redirect rules\n\nWhen querying for information about a specific site, you can request a list of redirect rules. In the following example query, the response includes the redirect type, target, pattern, and whether the redirection preserves any query string parameters.\n\n### Query\n\nRequestResponse\n\nCopy\n\n```\nquery {\n site {\n  siteInfo(site: “example”) {\n   name\n   rootPath\n   redirects {\n    redirectType\n    isQueryStringPreserved\n    target\n    pattern\n   }\n  }\n }\n}\n```\n\n### Result\n\nRequestResponse\n\nCopy\n\n```\n{\n \"data\": {\n  \"site\": {\n   \"siteInfo\": {\n    \"name\": \"example\",\n    \"rootPath\": \"/sitecore/content/sxa/example\",\n    \"redirects\": [\\\n     {\\\n       \"redirectType\": \"REDIRECT_302\",\\\n      \"isQueryStringPreserved\": true,\\\n      \"target\": \"/page C\",\\\n      \"pattern\": \"/page b/\"\\\n     }\\\n    ]\n   }\n  }\n }\n}\n```\n\n## Get error-handling pages\n\nWhen querying for information about a specific site, you can request information on all the pages involved in the error-handling process. The result can help you determine if all the required error codes are handled and by which pages.\n\n### Query\n\nRequestResponse\n\nCopy\n\n```\nquery {\n site {\n  siteInfo(site: “example”) {\n  \terrorHandling(language: “en”) {\n    notFoundPage {\n     id\n     path\n     field (name: \"Title\") {\n      name\n      value\n     }\n    },\n    notFoundPagePath,\n    serverErrorPage {\n     id\n     name\n     path\n     field (name: \"Title\") {\n      name\n      value\n     }\n    },\n   serverErrorPagePath\n   }\n  }\n }\n}\n```\n\n### Result\n\nRequestResponse\n\nCopy\n\n```\n{\n \"data\": {\n  \"site\": {\n   \"siteInfo\": {\n    \"errorHandling\": {\n     \"notFoundPage\": {\n      \"id\": \"7AC72838792444A389BDD10D63A30FA6\",\n      \"path\": \"/sitecore/content/sxa/example/Home/custom-404-error-page\",\n      \"field\": {\n       \"name\": \"Title\",\n       \"value\": \"custom-404-error-page\"\n      }\n     },\n     \"notFoundPagePath\": \"/custom-404-error-page\",\n     \"serverErrorPage\": {\n      \"id\": \"846C9D39299740D0A25235ECA3F5B202\",\n      \"name\": \"custom-500-error-page\",\n      \"path\": \"/sitecore/content/sxa/example/Home/custom-500-error-page\",\n      \"field\": {\n       \"name\": \"Title\",\n       \"value\": \"custom-500-error-page\"\n      }\n     },\n     \"serverErrorPagePath\": \"/custom-500-error-page\"\n    }\n   }\n  }\n }\n}\n```\n\n## Get robot information\n\nYou can request information about which search engine crawlers can access the site using a `site` query.\n\n### Query\n\nRequestResponse\n\nCopy\n\n```\nquery {\n site {\n  siteInfo(site: “example”) {\n   robots\n  }\n }\n}\n```\n\n### Result\n\nRequestResponse\n\nCopy\n\n```\n{\n \"data\": {\n  \"site\": {\n   \"siteInfo\": {\n    \"robots\": \"google, bing\\r\\nSitemap: https://xmcloudcm.localhost/sitemap.xml\\r\\n\"\n   }\n  }\n }\n}\n```\n\n## Get the sitemap of an SXA site\n\nYou can query for the path to the media items generated for an SXA site sitemap.\n\n### Query\n\nRequestResponse\n\nCopy\n\n```\nquery {\n site {\n  siteInfo(site: “example”) {\n   sitemap\n  }\n }\n}\n```\n\n### Result\n\nRequestResponse\n\nCopy\n\n```\n{\n \"data\": {\n  \"site\": {\n   \"siteInfo\": {\n    \"sitemap\": \" /-/media/Project/sxa/example/Sitemaps/sitemap.xml\"\n   }\n  }\n }\n}\n```\n\n## Get dictionary entries\n\nYou can retrieve individual dictionary entries for a site by using the `site` query. You can combine cursor arguments to apply paging to the results. If those aren't provided, the default is a `first` page size of 500.\n\n### Query\n\nRequestResponse\n\nCopy\n\n```\nquery  {\n  site {\n    siteInfo(site: \"example\") {\n      name\n      dictionary(language:\"en\",first:2, after:\"eyJzZWFyY2hBZnRlciI6WyJrZXkyIiwiZGVtb3NpdGUtMzVjZDg5NjJjNzE4NDI4Nzk2YzBmYTU2YmY2ZjRmMjIta2V5Mi11ay11YSJdLCJjb3VudCI6Mn0=\")\n      {\n        total\n        pageInfo{\n          hasNext\n          endCursor\n        }\n        results\n        {\n          key\n          value\n        }\n      }\n    }\n  }\n}\n\n```\n\n### Result\n\nRequestResponse\n\nCopy\n\n```\n  \"data\": {\n    \"site\": {\n      \"siteInfo\": {\n        \"name\": \"example\",\n        \"dictionary\": {\n          \"total\": 2,\n          \"pageInfo\": {\n            \"hasNext\": false,\n            \"endCursor\": \"eyJzZWFyY2hBZnRlciI6WyJ0ZXN0MiIsIm5ldyBzaXRlLWU1MmU1ZjBiZmMxMzQ0Mzc5YWQ4YzcyMjY2NzIzZmI0LXRlc3QyLWVuIl0sImNvdW50IjoyfQ==\"\n          },\n          \"results\": [\\\n            {\\\n              \"key\": \"key1\",\\\n              \"value\": \"value1\"\\\n            },\\\n            {\\\n              \"key\": \"key2\",\\\n              \"value\": \"value2\"\\\n            }\\\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n[Previous\\\\\n\\\\\nGenerate an Edge token](https://doc.sitecore.com/xmc/en/developers/xm-cloud/generate-an-edge-token.html) [Next\\\\\n\\\\\nSet up the GraphQL playgrounds to test content](https://doc.sitecore.com/xmc/en/developers/xm-cloud/set-up-the-graphql-playgrounds-to-test-content.html)\n\nDo you have some feedback for us?\n\nIf you have suggestions for improving this article,let us know!\n\n[Back to Top](https://doc.sitecore.com/xmc/en/developers/xm-cloud/query-examples-for-the-delivery-api.html#skip-navigation-link \"Back to Top\")\n\nThis website uses cookies to enhance the user experience.\n\nI declineI understand",
  "metadata": {
    "twitter:title": "Query examples for the Delivery API",
    "product": "XM Cloud",
    "og:url": "https://doc.sitecore.com/xmc/en/developers/xm-cloud/query-examples-for-the-delivery-api.html",
    "ogDescription": "Example queries for the GraphQL Delivery API for Experience Edge for XM and XM Cloud",
    "keywords": "GraphQL,Query,Experience Edge",
    "copyright": " © 2025 Sitecore ",
    "title": "Query examples for the Delivery API | Sitecore Documentation",
    "format-detection": "telephone=no, address=no, email=no",
    "viewport": "width=device-width, initial-scale=1",
    "language": "en",
    "ogImage": "https://doc.sitecore.com/api/og?title=Sitecore%20XM%20Cloud&logo=https://delivery-sitecore.sitecorecontenthub.cloud/api/public/content/mark-xm_cloud",
    "category": "technology",
    "useic": "no",
    "og:description": "Example queries for the GraphQL Delivery API for Experience Edge for XM and XM Cloud",
    "ogSiteName": "Sitecore Documentation",
    "description": "Example queries for the GraphQL Delivery API for Experience Edge for XM and XM Cloud",
    "og:site_name": "Sitecore Documentation",
    "og:type": "website",
    "twitter:description": "Example queries for the GraphQL Delivery API for Experience Edge for XM and XM Cloud",
    "role": "developers",
    "og:title": "Query examples for the Delivery API",
    "ogLocale": "en_US",
    "application-name": "Sitecore Documentation",
    "search": "default",
    "og:image": "https://doc.sitecore.com/api/og?title=Sitecore%20XM%20Cloud&logo=https://delivery-sitecore.sitecorecontenthub.cloud/api/public/content/mark-xm_cloud",
    "twitter:image": "https://doc.sitecore.com/api/og?title=Sitecore%20XM%20Cloud&logo=https://delivery-sitecore.sitecorecontenthub.cloud/api/public/content/mark-xm_cloud",
    "favicon": "https://delivery-sitecore.sitecorecontenthub.cloud/api/public/content/mark-xm_cloud",
    "ogUrl": "https://doc.sitecore.com/xmc/en/developers/xm-cloud/query-examples-for-the-delivery-api.html",
    "og:locale": "en_US",
    "ogTitle": "Query examples for the Delivery API",
    "twitter:card": "summary_large_image",
    "scrapeId": "4c2991af-dd4b-4607-b8b7-8dd834a72750",
    "sourceURL": "https://doc.sitecore.com/xmc/en/developers/xm-cloud/query-examples-for-the-delivery-api.html",
    "url": "https://doc.sitecore.com/xmc/en/developers/xm-cloud/query-examples-for-the-delivery-api.html",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic",
    "cacheState": "miss",
    "creditsUsed": 1
  },
  "warning": "This scrape job was throttled at your current concurrency limit. If you'd like to scrape faster, you can upgrade your plan."
}